name: Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
#  sonarqube:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#
#      - name: Build with Gradle
#        run: ./gradlew build

#      - name: SonarQube Scan
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: |
#          ./gradlew sonarqube \
#          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
#          -Dsonar.host.url=${{ secrets.SONAR_URL }} \
#          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
#    needs: sonarqube
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        run: |
          ./gradlew :payment-api:build -x test

      - name: Build, tag, and push payment-api image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: jangdm37/payment-api-repository
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f payment-api/Dockerfile payment-api
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "PAYMENT_API_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.HOST_PORT }}
          envs: USER_API_IMAGE,PAYMENT_API_IMAGE
          script: |
            cd ~/app
            sed -i '/^PAYMENT_API_IMAGE=/d' .env
            echo "PAYMENT_API_IMAGE=$PAYMENT_API_IMAGE" >> .env
            chmod +x deploy.sh
            ./deploy.sh
